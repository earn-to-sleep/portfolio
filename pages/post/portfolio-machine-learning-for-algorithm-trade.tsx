import Image from "next/image"
import Navigations from "../../components/Navigations"
import Footer from "../../components/Footer"
import Timeline from "../../components/Timeline"
import TimelineLite from "../../components/TimelineLite"
import Header from "../../components/Header"
import Title from "../../components/Title"
import Breadcrumb from "../../components/Breadcrumb"

export default function Template() {
    return (
        <>
            <Header title="機械学習でのアルゴリズム取引について個人的所感" description="機械学習でのアルゴリズム取引について、個人的に得た教訓や気付き" />
            <header>
                <Navigations />
                <Breadcrumb />
            </header>

            <main>
                <article className="content prose lg:prose-xl container m-auto">
                    <h1>
                        機械学習でのアルゴリズム取引について個人的所感
                        <small className="text-xs block text-gray-500">
                            機械学習でのアルゴリズム取引について、個人的に得た教訓や気付き
                        </small>
                    </h1>

                    <div className="container">
                        <Title props={{ title: "株や商品、暗号通貨の反復取引において、機械学習を活用して得た教訓", subtitle: "機械学習について、時系列データに対して分類モデル。価格を当てる、のような問題は複雑かつ難しい" }} />

                        <p>MLでは、回帰モデルよりも分類モデルの方が望ましい。<br />
                            なぜなら、価格が上がるか下がるか、それともステイかを予測することは、将来の価格がどうなるかを予測することよりも比較にならないほど簡単な問題でした。</p>

                        <p>
                            時系列データにおいての分類モデルは、ある時点で切り取った事象を分類しようとするもの（つまり、価格が上がるか下がるか）。あるいは、「買い」、「ステイまたはホールド」、「売り」に分類することも。<br />
                            アルゴリズムは基本的に、先人の肩に乗り、限られた選択肢の中から選び、そして、各選択肢には確率付く。ある選択肢の確率が高ければ高いほど、その事象が実現する期待値が高くなります。
                        </p>

                        <p>対して、回帰モデルは、<b>将来の価格</b>を予測しようとするもの。この場合、そのターゲットは無制限になりとても複雑になります。少なくともわたしの場合、とても複雑で改善ができなくなりました。</p>

                        <p>どの方法を使うにせよ、最も困難な部分の一つは<br />
                            ストップロスやリミットを設定すること。</p>

                        <p>例えば、実装した分類モデルが、現在の株価10,000円に関して株価が上昇すると判断。しかし、リミットの設定は？また、株価が下がった場合、ストップロスの値は？</p>

                        <p>回帰モデルを使用する場合も同じ問題が。<br />
                            現在の価格が10,000円で、モデルによると将来の価格（X分後またはY日後）が11,000円になると予想。がしかし、価格が下落し始めたらどうする？ストップロス値は？どのような執行処理で注文する？その注文は約定する？</p>


                        <p>すべての銘柄で同じ利益目標（前述したリミット）を使うのは、現実的な選択ではありませんでした。<br />
                            例えば、すべての銘柄で利益目標を10%とする。それはもう非現実的でした。なぜなら、与えられた将来の時間枠とする3営業日の予測をするとき、その指定時間枠における指定銘柄の株価変動率が1%以下であれば、株価が指定利益以上上昇することは、まずあり得ないと考えられるから。ここでは、ATRを活用し各銘柄のボラティリティを算出。ストップロスや売り目標を設定する際に役立ちました。</p>

                        <p>機械学習を開発するのは大変なことで、改善に継ぐ改善、とても反復的な地味なプロセスでした。<br />
                            また、これらのアルゴリズム取引を運用するため、ITインフラに多くのコストを支払いました。あまり考えたくありません。</p>


                        <Title props={{ title: "テクニカル指標について", subtitle: "テクニカルは遅行指数であり、過去を説明するが未来を予想するとは限らない" }} />

                        <p>前述のコストを知り、もしリソースを制限して戦うならば、テクニカル指標を特徴量としたアルゴリズム取引を開発するも検討にあがります。</p>

                        <p>比較的簡単にアクセスできるテクニカル指標で、[移動平均、MACD、シグナルライン、ボリンジャーバンド]などは遅行性の指標であり、わたしを道に迷わせました。<br />
                            これらの指標は、これまで何が起こっていたかを教えてくれます。しかし、これから何が起こるかを教えてくれるとは限りません。主にこのような理由から、一つのテクニカル指標を使うだけでは十分ではありませんでした。
                            <br />
                            テクニカル指標は、株の値動きの中で、あるトレンドがどの程度強いかを確認するために使用することができます。このように意思決定を行う場合、複数の指標を使い、他の種類の指標も同じようにシグナルを出しているかどうかを確認することが重要と至りました。</p>
                        <p>結果、特徴量が増えるのですが…</p>


                        <Title props={{ title: "まとめ", subtitle: "機械学習において未来を予測するとは" }} />

                        <p>どのような手法を用いても、必ず失敗する予測があります。「未来」を予測することと「今」を予測することとは、大きく違うものだからです。過去から今を予想する場合、選択しうるデータは全て過去のものであり揃っているからです。<br />
                            一方未来について例えると<br />
                            時間軸上のA地点から、未来H地点で結論が出ることを予測する場合、AからHの間の地点（例えばB、C、D、E、F、G）で起こること（Aから見ると未来のデータ）が結果であるHに影響を与える可能性があれば（あるから）、予測の信頼度は決して100%にはならないのです。<br />
                            よって予測は、入力データの品質と同じくらいのものでしかないと念頭に入れた上で扱うようにしています。</p>


                        <Title props={{ title: "蛇足", subtitle: "予測精度や流動性について" }} />

                        <p>
                            使用する手法は、予測で成功することよりも、純利益を目標とすべきでした。<br />
                            故に、わたしは必ずしも予測精度を重視していません。それよりも、最後に純利益の数字を確認することに価値を感じています。<br />
                            例としてあげるシナリオAがいいと誰の目に見ても明らかだと思います。
                        </p>


                        <p>
                            <b>A</b><br />
                            予測精度: 65% <br />
                            最終的な純利益: 20
                        </p>

                        <p>
                            <b>B</b> <br />
                            予測精度: 45% <br />
                            純利益: 250
                        </p>

                        <p>
                            この場合リスク分散が重要でした。1つの銘柄でアルゴリズムを実行するのではなく、複数の銘柄で実行することで大きな災害を回避ことができます。もちろん銘柄を絞り込むことは可能です、わたしにとって選別はとても価値のある仕事でした。
                        </p>

                        <p>
                            例えば、より大きな額でスイングトレード戦略を可能にする、よりボラティリティの高い銘柄をターゲットにすることが一つです。
                        </p>

                        <p>
                            流動性の高い銘柄の場合、必要なときに売買できスリッページが小さいといったことが挙げられます。一方、流動性が低い場合、スリッページはどころか、注文を引き受ける板がなかったりと約定しないおそれがあります。
                        </p>

                        <p>
                            また、「安全なN225やSP500のみを対象とする」、「何らかの理由で高いリスクを取る必要がある場合は、低位株のみを対象とする」などのフィルターを設定することも有益した。
                        </p>

                        <p>
                            最後までお読み頂きありがとうございます。<br />
                            なにか問題やアイデアが浮んだ際、パーティーとしてお声がけください。
                        </p>
                    </div>


                </article>
            </main>

            <footer>
                <Footer />
            </footer>
        </>
    )
}




// 現在から過去へ
// 
const timelineItems = [
    {
        title: '',
        timeline: '2023/01/07',
        manhours: 5,
        description: ''
    },
    {
        title: '',
        timeline: '2023/01/07',
        manhours: 4,
        description: ''
    },
    {
        title: '',
        timeline: '2023/01/05',
        manhours: 10,
        description: ''
    },
    {
        title: '',
        timeline: '2023/01/04',
        manhours: 10,
        description: ''
    },
]
